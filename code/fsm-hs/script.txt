:l ".\\src\\Signal.hs"
import Data.ByteString as B     
txt <- B.readFile ".\\example\\fsm_desc.yaml"  
import Data.Yaml   
:set  -XOverloadedRecordDot   
g = decode txt :: Maybe FsmDesc   
Just b = g          
f = fmap (mkSigFuncDecl' b.name b.state) b.signal
putStrLn (LE.intercalate "" f)


:l ".\\src\\State.hs"
import Data.ByteString as B  
import Data.Yaml   
txt <- B.readFile ".\\example\\fsm_desc.yaml"   
:set  -XOverloadedRecordDot   
g = decode txt :: Maybe FsmDesc   
Just b = g          
f <- mkCText ".\\example" b

:l ".\\src\\State.hs"
import Data.ByteString as B  
import Data.Yaml   
txt <- B.readFile ".\\example\\fsm_desc.yaml"   
:set  -XOverloadedRecordDot   
g = decode txt :: Maybe FsmDesc   
Just b = g          
f = mkStatetext "ec" $ (LE.head b.state)
putStrLn f


:l ".\\src\\Core.hs"
import Data.ByteString as B  
import Data.Yaml   
txt <- B.readFile ".\\example\\fsm_desc.yaml"   
:set  -XOverloadedRecordDot   
g = decode txt :: Maybe FsmDesc   
Just b = g    
mkFsm "./example" b 